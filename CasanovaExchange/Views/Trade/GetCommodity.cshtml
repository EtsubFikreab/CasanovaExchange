@using CasanovaExchange.Models;
@model List<Commodity>
@{
	ViewBag.Title = "Get Commodity";
	string c = ViewBag.Commodity;
}
<h1>@c</h1>

	<input type="text" id="search-input" onkeyup="myFunction()" placeholder="Search" name="search">

<table class="table table-hover table-dark w-75">
	<thead>
		<tr>
			<th scope="col">Name</th>
			<th scope="col">Symbol</th>
			<th scope="col">Production Year</th>
			<th scope="col">Warehouse Code</th>
			<th scope="col">Select</th>
		</tr>
	</thead>
	<tbody id="Commodity-table">

		@foreach (var commodityItem in @Model)
		{
			<tr>
				<th>@commodityItem.Name</th>
				<th>@commodityItem.Symbol</th>
				<th>@commodityItem.ProductionYear</th>
				<th>@commodityItem.CommodityWarehouse.WarehouseCode</th>
				<th>
					<a class="commodity-list" asp-controller="Trade" asp-action="GetCommodityListings" asp-route-commodityId="@commodityItem.Id"><img src="~/icons/icons8_back_96px.png"></a>
				</th>
			</tr>
		}

	</tbody>
</table>
<style>
	img {
		max-width: 3ch;
	}

	#search-input {
		margin-top: 2ch;
		margin-bottom: 1ch;

		border-radius: 5px;
		
		padding-left: 2ch;
		padding-top: 5px;
		padding-bottom: 5px;
		
		width: 20vw;
	}
</style>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
	$(document).ready(function () {
		$("#search-input").on("keyup", function () {
			var value = $(this).val().toLowerCase();
			$("#Commodity-table tr").filter(function () {
				$(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
			});
		});
	});

	$(function () {
		const ths = $("th");
		let sortOrder = 1;

		ths.on("click", function () {
			const rows = sortRows(this);
			rebuildTbody(rows);
			updateClassName(this);
			sortOrder *= -1;
		})

		function sortRows(th) {
			const rows = $.makeArray($('tbody > tr'));
			const col = th.cellIndex;
			const type = th.dataset.type;
			rows.sort(function (a, b) {
				return compare(a, b, col, type) * sortOrder;
			});
			return rows;
		}

		function compare(a, b, col, type) {
			let _a = a.children[col].textContent;
			let _b = b.children[col].textContent;
			if (type === "number") {
				_a *= 1;
				_b *= 1;
			} else if (type === "string") {
				_a = _a.toLowerCase();
				_b = _b.toLowerCase();
			}

			if (_a < _b) {
				return -1;
			}
			if (_a > _b) {
				return 1;
			}
			return 0;
		}

		function rebuildTbody(rows) {
			const tbody = $("tbody");
			while (tbody.firstChild) {
				tbody.remove(tbody.firstChild);
			}

			let j;
			for (j = 0; j < rows.length; j++) {
				tbody.append(rows[j]);
			}
		}

		function updateClassName(th) {
			let k;
			for (k = 0; k < ths.length; k++) {
				ths[k].className = "";
			}
			th.className = sortOrder === 1 ? "asc" : "desc";
		}

	});
</script>